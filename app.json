[{"name":"app.R","content":"library(shiny)\n\n# Define UI for random distribution app ----\nui <- fluidPage(\n  \n  # App title ----\n  titlePanel(\"Tabsets\"),\n  \n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n    \n    # Sidebar panel for inputs ----\n    sidebarPanel(\n      \n      # Input: Select the random distribution type ----\n      radioButtons(\"dist\", \"Distribution type:\",\n                   c(\"Normal\" = \"norm\",\n                     \"Uniform\" = \"unif\",\n                     \"Log-normal\" = \"lnorm\",\n                     \"Exponential\" = \"exp\")),\n      \n      # br() element to introduce extra vertical spacing ----\n      br(),\n      \n      # Input: Slider for the number of observations to generate ----\n      sliderInput(\"n\",\n                  \"Number of observations:\",\n                  value = 500,\n                  min = 1,\n                  max = 1000)\n      \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(\n      \n      # Output: Tabset w/ plot, summary, and table ----\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"Plot\", plotOutput(\"plot\")),\n                  tabPanel(\"Summary\", verbatimTextOutput(\"summary\")),\n                  tabPanel(\"Table\", tableOutput(\"table\"))\n      )\n      \n    )\n  )\n)\n\n# Define server logic for random distribution app ----\nserver <- function(input, output) {\n  \n  # Reactive expression to generate the requested distribution ----\n  # This is called whenever the inputs change. The output functions\n  # defined below then use the value computed from this expression\n  d <- reactive({\n    dist <- switch(input$dist,\n                   norm = rnorm,\n                   unif = runif,\n                   lnorm = rlnorm,\n                   exp = rexp,\n                   rnorm)\n    \n    dist(input$n)\n  })\n  \n  # Generate a plot of the data ----\n  # Also uses the inputs to build the plot label. Note that the\n  # dependencies on the inputs and the data reactive expression are\n  # both tracked, and all expressions are called in the sequence\n  # implied by the dependency graph.\n  output$plot <- renderPlot({\n    dist <- input$dist\n    n <- input$n\n    \n    hist(d(),\n         main = paste(\"r\", dist, \"(\", n, \")\", sep = \"\"),\n         col = \"#75AADB\", border = \"white\")\n  })\n  \n  # Generate a summary of the data ----\n  output$summary <- renderPrint({\n    summary(d())\n  })\n  \n  # Generate an HTML table view of the data ----\n  output$table <- renderTable({\n    d()\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui, server)\n","type":"text"},{"name":"normal.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
